const ai =require("openai");
const fs = require('fs');
const OpenAI =ai.OpenAI
var fsp = require('fs/promises');
const uuid = require('uuid');
const utils = require("../utils/index")
const token = require("./token");
const client = new OpenAI({
  apiKey: process.env.OPENAIKEY,
  baseURL:  process.env.OPENAPIURL,
  });
async function generate(msg) {
    const stream = await client.chat.completions.create({
        model: "default",
        messages: [
              {
                role: "user",
                content: `Áé∞Âú®ÊòØ${Date.now()}ÔºåËØ∑Â∞Ü‰ª•‰∏ã‰ø°ÊÅØÈáçÊñ∞Ê†ºÂºèÊàêjsonÂΩ¢ÂºèÔºåËøîÂõûÁªôÊàë„ÄÇË¶ÅÊ±ÇÊ†ºÂºèÔºö{
"token":"",
"address":"",
‚Äútypes:"",
"bets":"",
"deadline":"",
"words":"",
"final":""
}Ôºå‰∏çÂÖÅËÆ∏ËøîÂõûjsonÂ§ñÁöÑ‰ªªÊÑèÂÜÖÂÆπ„ÄÇ
‰Ω†Â∞Ü‰ºöÊî∂Âà∞‰∏Ä‰∏™ÂÖ≥‰∫éÁî®Êà∑ Ëµå Êüê‰∏™‰ª£Â∏ÅÁöÑÁõ∏ÂÖ≥ÂÜÖÂÆπ„ÄÇ‰Ω†ÊîØÊåÅ‰ª•‰∏ãËµåÊ≥®Ôºö
1. ‰ª£Â∏Åmarketcap
2. ‰ª£Â∏ÅÊòØÂê¶ËÉΩÂà∞ËææËá™Â∑±Êõ≤Á∫øÁöÑ'king of the hill'
3. ‰ª£Â∏Å‰ª∑Ê†ºËÉΩÂê¶Âà∞x
4. ‰ª£Â∏ÅËÉΩÂê¶ÁøªnÂÄç
5. ‰ª£Â∏Å‰ª∑Ê†º‰ºöËµ∞È´òÊàñËµ∞‰Ωé
$tokenÊòØÁî®Êà∑ÊèêÂèäÁöÑ‰ª£Â∏ÅÔºåÈúÄÊòØSolanaÂú∞ÂùÄÊàñ‰∏Ä‰∏≤stringÔºå
$addressÊòØÁî®Êà∑ÊâÄÊèêÂèäÁöÑ‰ª£Â∏ÅÂú∞ÂùÄÔºåÂ¶ÇÊûúÁî®Êà∑Êú™ÊèêÂèäÂàôÁïôÁ©∫„ÄÇ
$typesÊòØÁî®Êà∑Ë¶ÅËµåÁöÑËµåÁ∫¶Á±ªÂûãÔºåÊîØÊåÅ‰ª•‰∏ãÁ±ªÂûãÔºö
marketcapÔºåking_of_the_hill,price_to_x,price_lever_to_n,price_up_or_down
$betsÊòØÁî®Êà∑Ë¶ÅËµåÁöÑÂÜÖÂÆπÔºåÊ†πÊçÆ‰∏çÂêåËµåÁ∫¶Á±ªÂûãÂàÜÂà´ÊòØÔºö
marketcap=>number ; king_of_the_hill=>true/not ; price_to_x=>number ; price_lever_to_n=>number ; price_up_or_down=>0
$deadlineÊòØÁî®Êà∑ÊèêÂèäÁöÑÊà™Ê≠¢Êó∂Èó¥ÔºåÂ¶ÇÊûúÁî®Êà∑Ê≤°ÊúâÊèêÂèäÊó∂Èó¥ÔºåÂõûÂ§çdefault„ÄÇdeadlineÂ≠óÊÆµË¶ÅÊ±Ç‰ΩøÁî®timestampÂΩ¢Âºè„ÄÇ
$wordsÊòØ‰Ω†ÈúÄË¶ÅÁªôÁî®Êà∑Êèê‰æõÁöÑ‰∏Ä‰∏≤ÂõûÂ§çÔºåËØ•ÂõûÂ§çÂ∞Ü‰ºöÁî±ÊàëÂú®twitter‰∏äreplyÁî®Êà∑„ÄÇ
$finalÊòØÂØπËøô‰∏™ËµåÁ∫¶ËøõË°åËá™ÁÑ∂ËØ≠Ë®ÄÊÄªÁªì„ÄÇÂ¶ÇÔºöBet $token will reach king of hill „ÄÇ
Â¶ÇÊûú‰Ω†ËÆ§‰∏∫Áî®Êà∑ËØ¥ÁöÑÂÜÖÂÆπÔºåÊó†Ê≥ï‰∏é‰∏äËø∞Á±ªÂûãËøõË°åÂåπÈÖç„ÄÇËØ∑ËøîÂõûÊâÄÊúâÂ≠óÊÆµ‰∏∫Á©∫„ÄÇÂàáËÆ∞‰ΩøÁî®Ëã±ËØ≠ÂõûÂ§ç„ÄÇ
Áé∞Âú®Ôºå‰Ω†Êî∂Âà∞‰ª•‰∏ãÂÜÖÂÆπ„ÄÇ${msg}`,
              }
        ],
        venice_parameters: {
            include_venice_system_prompt: false,
          },
      });

    //   console.log(
    //     stream.choices[0].message.content
    //   )
      return stream.choices[0].message.content;
}


const generateBets = async(msg,sign)=>{
    let aiRet = {}
    let final = {}
    console.log(msg,sign)
    try{
        const ag = await generate(msg);
       
        const _aiRet = JSON.parse(
            ag
        )
        aiRet = _aiRet;
        console.log("üç∫AG :: ",ag,_aiRet)
        if(_aiRet && _aiRet?.token &&_aiRet?.types)
        {
            aiRet.deadline = Date.now()+(24*3600000)
            const tk = await token.findToken(aiRet.token,aiRet.address)
            console.log(tk);
            if(!tk)
            {
                return false;
            }
            final =  {
                "id":uuid.v4(),//New UUID
                "originMessage":{
                    "msg":msg,
                    "sign":sign
                },
                "token": tk.name,
                "address": tk.address,
                "tokenInfo":tk,
                "types": aiRet.types,
                "bets": aiRet.bets,
                "deadline": aiRet.deadline,
                "words": aiRet.words,
                "final": aiRet.final
            }
            await utils.db.newBet(final);
            return final;
        }else{
            return false;
            // return await generateBets(msg)
        }
    }catch(e)
    {
        console.error(e)
        return false;
        // return await generateBets(msg)
    }
    
    
}


module.exports = {
    generate,
    generateBets
}